using 2summaries and 1 prompt to combine summaries

## Leveraging the Chrome Translator API for Seamless Cross-Lingual Experiences

The Chrome Translator API offers a powerful way to translate text within the browser, utilizing local AI models for faster and more efficient translations than relying solely on server-side processing. This API is currently in an origin trial available in Chrome 131-137.

**Getting Started:**

To utilize the Translator API, you need to register your origin or extension ID, provide your origin or extension ID, and add the provided token to your website. For development purposes, you can enable the Translator API Flags, relaunch Chrome, and update to a newer version of Chrome.

**Supported Features and Limitations:**

The API supports a limited number of language pairs during the origin trial, with restrictions on the maximum number of pairs per user. Language selection is based on Chrome's language packs and user preferences.

**Limitations During the Origin Trial:**

The API is currently limited by the origin trial, including:

*   Restricted language pair support (up to 3 pairs per user).
*   Potential for fingerprinting.
*   Language selection based on preferred languages or popular languages in Chrome's language packs.


**Local Testing and Web Worker Support:**

For local testing and bypassing origin trial restrictions, you can disable the `TranslationAPIAcceptLanguagesCheck` command-line option or set the `chrome://flags/#translation-api` flag to Enable without language pack limit.

**Sequential Translations and Web Worker Status:**

Translations are processed sequentially, meaning subsequent translations are blocked until the previous ones complete. Web worker support is expected once the API is widely available.

**Standardization Efforts:**

The Chrome team is actively working to improve the Translator API's cross-browser compatibility through standardization efforts. The API proposal is being reviewed by the W3C and Mozilla. 



using only prompt to generate summary
The Translator API in Chrome offers a real-time translation experience powered by local AI models, eliminating the need for cloud-based translation services. This approach delivers faster translation, reduced server load, and a more seamless experience for users. To access the API during the origin trial, developers can sign up for the trial, enable it on their websites or extensions, and handle download errors and translation results using provided code snippets.  While limitations apply, such as the number of supported language pairs and download restrictions, the API provides flexibility through local development options and community involvement in standardization efforts. The ultimate goal is to create a standardized and robust translation API that benefits users and developers worldwide. 

using  two summaries and then rewriter to combine summaries

The Google Chrome Translator API enables users to translate text locally using AI models, offering faster and more economical translations by eliminating server-side interactions. Currently available as an origin trial in Chrome versions 131 to 137, this feature is accessible to all users on the supported Chrome versions. 

The origin trial encompasses both the Translator and Language Detector APIs, capable of handling text in unknown source languages. To utilize the Translator API, users must agree to Google's AI Prohibited Uses policy, enroll in the origin trial, and integrate a token into their web pages. For local development, Chrome users need to update to the latest version, enable the Translator API flag, set a language pack limit (if desired), and restart the browser.

The Translator API's functionality can be detected using a simple feature detection snippet: if the 'translation' and 'createTranslator' properties exist within the web page's context, the API is likely supported. The API leverages language packs for translations and supports BCP 47 language short codes. The 'canTranslate()' function determines the translation status, returning 'no', 'readily', or 'after-download' results. Users can monitor download progress for 'after-download' translations through the 'downloadProgress' event. 

The Translator API is currently accessible within the origin trial, enabling translation between English and French. The API employs the 'downloadprogress' event and the 'ready' promise to communicate download completion and translation readiness to users. The origin trial allows for up to three language packs during translation. Users can temporarily bypass language restrictions for local testing using command-line options or flags. Translations are processed sequentially, and multiple requests may be necessary for handling large volumes of text. While the API is currently supported from the main thread, its potential availability within web workers in the future is being explored by the Chrome team. The Chrome team is actively working to standardize the Translator API across different browsers for enhanced compatibility, and the community has expressed strong support for this initiative. 



{{{{{{{{{{{{{{{{{}}}}}}}}}}}}}}}}}
Uncaught (in promise) ConstraintError: Unable to add key to index 'url': at least one key does not satisfy the uniqueness requirements.
Context
sidepanel/index.html
Stack Trace
sidepanel/index.js:4655 (document.getElementById.onclick)

Failed to retrieve favicon: TypeError: Failed to fetch
Context
sidepanel/index.html
Stack Trace
sidepanel/index.js:4276 (getFavicon)
...
3738
3739
3740
3741
3742
3743
3744
3745
3746
3747
3748
3749
3750
3751
3752
3753
3754
3755
3756
3757
3758
3759
3760
3761
3762
3763
3764
3765
3766
3767
3768
3769
3770
3771
3772
3773
3774
3775
3776
3777
3778
3779
3780
3781
3782
3783
3784
3785
3786
3787
3788
3789
3790
3791
3792
3793
3794
3795
3796
3797
3798
3799
3800
3801
3802
3803
3804
3805
3806
3807
3808
3809
3810
3811
3812
3813
3814
3815
3816
3817
3818
3819
3820
3821
3822
3823
3824
3825
3826
3827
3828
3829
3830
3831
3832
3833
3834
3835
3836
3837
3838
3839
3840
3841
3842
3843
3844
3845
3846
3847
3848
3849
3850
3851
3852
3853
3854
3855
3856
3857
3858
3859
3860
3861
3862
3863
3864
3865
3866
3867
3868
3869
3870
3871
3872
3873
3874
3875
3876
3877
3878
3879
3880
3881
3882
3883
3884
3885
3886
3887
3888
3889
3890
3891
3892
3893
3894
3895
3896
3897
3898
3899
3900
3901
3902
3903
3904
3905
3906
3907
3908
3909
3910
3911
3912
3913
3914
3915
3916
3917
3918
3919
3920
3921
3922
3923
3924
3925
3926
3927
3928
3929
3930
3931
3932
3933
3934
3935
3936
3937
3938
3939
3940
3941
3942
3943
3944
3945
3946
3947
3948
3949
3950
3951
3952
3953
3954
3955
3956
3957
3958
3959
3960
3961
3962
3963
3964
3965
3966
3967
3968
3969
3970
3971
3972
3973
3974
3975
3976
3977
3978
3979
3980
3981
3982
3983
3984
3985
3986
3987
3988
3989
3990
3991
3992
3993
3994
3995
3996
3997
3998
3999
4000
4001
4002
4003
4004
4005
4006
4007
4008
4009
4010
4011
4012
4013
4014
4015
4016
4017
4018
4019
4020
4021
4022
4023
4024
4025
4026
4027
4028
4029
4030
4031
4032
4033
4034
4035
4036
4037
4038
4039
4040
4041
4042
4043
4044
4045
4046
4047
4048
4049
4050
4051
4052
4053
4054
4055
4056
4057
4058
4059
4060
4061
4062
4063
4064
4065
4066
4067
4068
4069
4070
4071
4072
4073
4074
4075
4076
4077
4078
4079
4080
4081
4082
4083
4084
4085
4086
4087
4088
4089
4090
4091
4092
4093
4094
4095
4096
4097
4098
4099
4100
4101
4102
4103
4104
4105
4106
4107
4108
4109
4110
4111
4112
4113
4114
4115
4116
4117
4118
4119
4120
4121
4122
4123
4124
4125
4126
4127
4128
4129
4130
4131
4132
4133
4134
4135
4136
4137
4138
4139
4140
4141
4142
4143
4144
4145
4146
4147
4148
4149
4150
4151
4152
4153
4154
4155
4156
4157
4158
4159
4160
4161
4162
4163
4164
4165
4166
4167
4168
4169
4170
4171
4172
4173
4174
4175
4176
4177
4178
4179
4180
4181
4182
4183
4184
4185
4186
4187
4188
4189
4190
4191
4192
4193
4194
4195
4196
4197
4198
4199
4200
4201
4202
4203
4204
4205
4206
4207
4208
4209
4210
4211
4212
4213
4214
4215
4216
4217
4218
4219
4220
4221
4222
4223
4224
4225
4226
4227
4228
4229
4230
4231
4232
4233
4234
4235
4236
4237
4238
4239
4240
4241
4242
4243
4244
4245
4246
4247
4248
4249
4250
4251
4252
4253
4254
4255
4256
4257
4258
4259
4260
4261
4262
4263
4264
4265
4266
4267
4268
4269
4270
4271
4272
4273
4274
4275
4276
4277
4278
4279
4280
4281
4282
4283
4284
4285
4286
4287
4288
4289
4290
4291
4292
4293
4294
4295
4296
4297
4298
4299
4300
4301
4302
4303
4304
4305
4306
4307
4308
4309
4310
4311
4312
4313
4314
4315
4316
4317
4318
4319
4320
4321
4322
4323
4324
4325
4326
4327
4328
4329
4330
4331
4332
4333
4334
4335
4336
4337
4338
4339
4340
4341
4342
4343
4344
4345
4346
4347
4348
4349
4350
4351
4352
4353
4354
4355
4356
4357
4358
4359
4360
4361
4362
4363
4364
4365
4366
4367
4368
4369
4370
4371
4372
4373
4374
4375
4376
4377
4378
4379
4380
4381
4382
4383
4384
4385
4386
4387
4388
4389
4390
4391
4392
4393
4394
4395
4396
4397
4398
4399
4400
4401
4402
4403
4404
4405
4406
4407
4408
4409
4410
4411
4412
4413
4414
4415
4416
4417
4418
4419
4420
4421
4422
4423
4424
4425
4426
4427
4428
4429
4430
4431
4432
4433
4434
4435
4436
4437
4438
4439
4440
4441
4442
4443
4444
4445
4446
4447
4448
4449
4450
4451
4452
4453
4454
4455
4456
4457
4458
4459
4460
4461
4462
4463
4464
4465
4466
4467
4468
4469
4470
4471
4472
4473
4474
4475
4476
4477
4478
4479
4480
4481
4482
4483
4484
4485
4486
4487
4488
4489
4490
4491
4492
4493
4494
4495
4496
4497
4498
4499
4500
4501
4502
4503
4504
4505
4506
4507
4508
4509
4510
4511
4512
4513
4514
4515
4516
4517
4518
4519
4520
4521
4522
4523
4524
4525
4526
4527
4528
4529
4530
4531
4532
4533
4534
4535
4536
4537
4538
4539
4540
4541
4542
4543
4544
4545
4546
4547
4548
4549
4550
4551
4552
4553
4554
4555
4556
4557
4558
4559
4560
4561
4562
4563
4564
4565
4566
4567
4568
4569
4570
4571
4572
4573
4574
4575
4576
4577
4578
4579
4580
4581
4582
4583
4584
4585
4586
4587
4588
4589
4590
4591
4592
4593
4594
4595
4596
4597
4598
4599
4600
4601
4602
4603
4604
4605
4606
4607
4608
4609
4610
4611
4612
4613
4614
4615
4616
4617
4618
4619
4620
4621
4622
4623
4624
4625
4626
4627
4628
4629
4630
4631
4632
4633
4634
4635
4636
4637
4638
4639
4640
4641
4642
4643
4644
4645
4646
4647
4648
4649
4650
4651
4652
4653
4654
4655
4656
4657
4658
4659
4660
4661
4662
4663
4664
4665
4666
4667
4668
4669
4670
4671
4672
4673
4674
4675
4676
4677
4678
4679
4680
4681
4682
4683
4684
4685
4686
4687
4688
4689
4690
4691
4692
4693
4694
4695
4696
4697
4698
4699
4700
4701
4702
4703
4704
4705
4706
4707
4708
4709
4710
4711
4712
4713
4714
4715
4716
4717
4718
4719
4720
4721
4722
4723
4724
4725
4726
4727
4728
4729
4730
4731
4732
4733
4734
4735
4736
<3737 lines not shown>
            opts.async = this.defaults.async || opts.async || false;
            // ==-- Parse "addon" extensions --== //
            if (pack.extensions) {
                pack.extensions.forEach((ext) => {
                    if (!ext.name) {
                        throw new Error('extension name required');
                    }
                    if ('renderer' in ext) { // Renderer extensions
                        const prevRenderer = extensions.renderers[ext.name];
                        if (prevRenderer) {
                            // Replace extension with func to run new extension but fall back if false
                            extensions.renderers[ext.name] = function (...args) {
                                let ret = ext.renderer.apply(this, args);
                                if (ret === false) {
                                    ret = prevRenderer.apply(this, args);
                                }
                                return ret;
                            };
                        }
                        else {
                            extensions.renderers[ext.name] = ext.renderer;
                        }
                    }
                    if ('tokenizer' in ext) { // Tokenizer Extensions
                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {
                            throw new Error("extension level must be 'block' or 'inline'");
                        }
                        const extLevel = extensions[ext.level];
                        if (extLevel) {
                            extLevel.unshift(ext.tokenizer);
                        }
                        else {
                            extensions[ext.level] = [ext.tokenizer];
                        }
                        if (ext.start) { // Function to check for start of token
                            if (ext.level === 'block') {
                                if (extensions.startBlock) {
                                    extensions.startBlock.push(ext.start);
                                }
                                else {
                                    extensions.startBlock = [ext.start];
                                }
                            }
                            else if (ext.level === 'inline') {
                                if (extensions.startInline) {
                                    extensions.startInline.push(ext.start);
                                }
                                else {
                                    extensions.startInline = [ext.start];
                                }
                            }
                        }
                    }
                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens
                        extensions.childTokens[ext.name] = ext.childTokens;
                    }
                });
                opts.extensions = extensions;
            }
            // ==-- Parse "overwrite" extensions --== //
            if (pack.renderer) {
                const renderer = this.defaults.renderer || new _Renderer(this.defaults);
                for (const prop in pack.renderer) {
                    if (!(prop in renderer)) {
                        throw new Error(`renderer '${prop}' does not exist`);
                    }
                    if (['options', 'parser'].includes(prop)) {
                        // ignore options property
                        continue;
                    }
                    const rendererProp = prop;
                    const rendererFunc = pack.renderer[rendererProp];
                    const prevRenderer = renderer[rendererProp];
                    // Replace renderer with func to run extension, but fall back if false
                    renderer[rendererProp] = (...args) => {
                        let ret = rendererFunc.apply(renderer, args);
                        if (ret === false) {
                            ret = prevRenderer.apply(renderer, args);
                        }
                        return ret || '';
                    };
                }
                opts.renderer = renderer;
            }
            if (pack.tokenizer) {
                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);
                for (const prop in pack.tokenizer) {
                    if (!(prop in tokenizer)) {
                        throw new Error(`tokenizer '${prop}' does not exist`);
                    }
                    if (['options', 'rules', 'lexer'].includes(prop)) {
                        // ignore options, rules, and lexer properties
                        continue;
                    }
                    const tokenizerProp = prop;
                    const tokenizerFunc = pack.tokenizer[tokenizerProp];
                    const prevTokenizer = tokenizer[tokenizerProp];
                    // Replace tokenizer with func to run extension, but fall back if false
                    // @ts-expect-error cannot type tokenizer function dynamically
                    tokenizer[tokenizerProp] = (...args) => {
                        let ret = tokenizerFunc.apply(tokenizer, args);
                        if (ret === false) {
                            ret = prevTokenizer.apply(tokenizer, args);
                        }
                        return ret;
                    };
                }
                opts.tokenizer = tokenizer;
            }
            // ==-- Parse Hooks extensions --== //
            if (pack.hooks) {
                const hooks = this.defaults.hooks || new _Hooks();
                for (const prop in pack.hooks) {
                    if (!(prop in hooks)) {
                        throw new Error(`hook '${prop}' does not exist`);
                    }
                    if (['options', 'block'].includes(prop)) {
                        // ignore options and block properties
                        continue;
                    }
                    const hooksProp = prop;
                    const hooksFunc = pack.hooks[hooksProp];
                    const prevHook = hooks[hooksProp];
                    if (_Hooks.passThroughHooks.has(prop)) {
                        // @ts-expect-error cannot type hook function dynamically
                        hooks[hooksProp] = (arg) => {
                            if (this.defaults.async) {
                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {
                                    return prevHook.call(hooks, ret);
                                });
                            }
                            const ret = hooksFunc.call(hooks, arg);
                            return prevHook.call(hooks, ret);
                        };
                    }
                    else {
                        // @ts-expect-error cannot type hook function dynamically
                        hooks[hooksProp] = (...args) => {
                            let ret = hooksFunc.apply(hooks, args);
                            if (ret === false) {
                                ret = prevHook.apply(hooks, args);
                            }
                            return ret;
                        };
                    }
                }
                opts.hooks = hooks;
            }
            // ==-- Parse WalkTokens extensions --== //
            if (pack.walkTokens) {
                const walkTokens = this.defaults.walkTokens;
                const packWalktokens = pack.walkTokens;
                opts.walkTokens = function (token) {
                    let values = [];
                    values.push(packWalktokens.call(this, token));
                    if (walkTokens) {
                        values = values.concat(walkTokens.call(this, token));
                    }
                    return values;
                };
            }
            this.defaults = { ...this.defaults, ...opts };
        });
        return this;
    }
    setOptions(opt) {
        this.defaults = { ...this.defaults, ...opt };
        return this;
    }
    lexer(src, options) {
        return _Lexer.lex(src, options ?? this.defaults);
    }
    parser(tokens, options) {
        return _Parser.parse(tokens, options ?? this.defaults);
    }
    parseMarkdown(blockType) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const parse = (src, options) => {
            const origOpt = { ...options };
            const opt = { ...this.defaults, ...origOpt };
            const throwError = this.onError(!!opt.silent, !!opt.async);
            // throw error if an extension set async to true but parse was called with async: false
            if (this.defaults.async === true && origOpt.async === false) {
                return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));
            }
            // throw error in case of non string input
            if (typeof src === 'undefined' || src === null) {
                return throwError(new Error('marked(): input parameter is undefined or null'));
            }
            if (typeof src !== 'string') {
                return throwError(new Error('marked(): input parameter is of type '
                    + Object.prototype.toString.call(src) + ', string expected'));
            }
            if (opt.hooks) {
                opt.hooks.options = opt;
                opt.hooks.block = blockType;
            }
            const lexer = opt.hooks ? opt.hooks.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);
            const parser = opt.hooks ? opt.hooks.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);
            if (opt.async) {
                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)
                    .then(src => lexer(src, opt))
                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)
                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)
                    .then(tokens => parser(tokens, opt))
                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)
                    .catch(throwError);
            }
            try {
                if (opt.hooks) {
                    src = opt.hooks.preprocess(src);
                }
                let tokens = lexer(src, opt);
                if (opt.hooks) {
                    tokens = opt.hooks.processAllTokens(tokens);
                }
                if (opt.walkTokens) {
                    this.walkTokens(tokens, opt.walkTokens);
                }
                let html = parser(tokens, opt);
                if (opt.hooks) {
                    html = opt.hooks.postprocess(html);
                }
                return html;
            }
            catch (e) {
                return throwError(e);
            }
        };
        return parse;
    }
    onError(silent, async) {
        return (e) => {
            e.message += '\nPlease report this to https://github.com/markedjs/marked.';
            if (silent) {
                const msg = '<p>An error occurred:</p><pre>'
                    + escape$1(e.message + '', true)
                    + '</pre>';
                if (async) {
                    return Promise.resolve(msg);
                }
                return msg;
            }
            if (async) {
                return Promise.reject(e);
            }
            throw e;
        };
    }
}

const markedInstance = new Marked();
function marked(src, opt) {
    return markedInstance.parse(src, opt);
}
/**
 * Sets the default options.
 *
 * @param options Hash of options
 */
marked.options =
    marked.setOptions = function (options) {
        markedInstance.setOptions(options);
        marked.defaults = markedInstance.defaults;
        changeDefaults(marked.defaults);
        return marked;
    };
/**
 * Gets the original marked default options.
 */
marked.getDefaults = _getDefaults;
marked.defaults = _defaults;
/**
 * Use Extension
 */
marked.use = function (...args) {
    markedInstance.use(...args);
    marked.defaults = markedInstance.defaults;
    changeDefaults(marked.defaults);
    return marked;
};
/**
 * Run callback for every token
 */
marked.walkTokens = function (tokens, callback) {
    return markedInstance.walkTokens(tokens, callback);
};
/**
 * Compiles markdown to HTML without enclosing `p` tag.
 *
 * @param src String of markdown source to be compiled
 * @param options Hash of options
 * @return String of compiled HTML
 */
marked.parseInline = markedInstance.parseInline;
/**
 * Expose
 */
marked.Parser = _Parser;
marked.parser = _Parser.parse;
marked.Renderer = _Renderer;
marked.TextRenderer = _TextRenderer;
marked.Lexer = _Lexer;
marked.lexer = _Lexer.lex;
marked.Tokenizer = _Tokenizer;
marked.Hooks = _Hooks;
marked.parse = marked;
marked.options;
marked.setOptions;
marked.use;
marked.walkTokens;
marked.parseInline;
_Parser.parse;
_Lexer.lex;

// const DB_NAME = 'smart-bookmarks';
// const DB_VERSION = 1;

// class BookmarkDB {
//   constructor() {
//     this.db = null;
//   }

//   async init() {
//     return new Promise((resolve, reject) => {
//       const request = indexedDB.open(DB_NAME, DB_VERSION);

//       request.onerror = () => reject(request.error);
//       request.onsuccess = () => {
//         this.db = request.result;
//         resolve();
//       };

//       request.onupgradeneeded = (event) => {
//         const db = event.target.result;
//         if (!db.objectStoreNames.contains('bookmarks')) {
//           const store = db.createObjectStore('bookmarks', { keyPath: 'id', autoIncrement: true });
//           store.createIndex('url', 'url', { unique: true }); // Index for quick lookup by URL
//           store.createIndex('timestamp', 'timestamp'); // Index for sorting by timestamp
//         }
//       };
//     });
//   }

//   async addBookmark({ url, summary, title }) {
//     const timestamp = new Date().toISOString(); // Ensure consistent format for timestamps
//     const bookmark = { url, summary, title, timestamp };

//     return new Promise((resolve, reject) => {
//       const tx = this.db.transaction('bookmarks', 'readwrite');
//       const store = tx.objectStore('bookmarks');
//       const request = store.add(bookmark);

//       request.onsuccess = () => resolve(request.result);
//       request.onerror = () => reject(request.error);
//     });
//   }

//   async getBookmarks() {
//     return new Promise((resolve, reject) => {
//       const tx = this.db.transaction('bookmarks', 'readonly');
//       const store = tx.objectStore('bookmarks');
//       const request = store.getAll();

//       request.onsuccess = () => {
//         const bookmarks = request.result.map((bookmark) => ({
//           ...bookmark,
//           timestamp: new Date(bookmark.timestamp), // Convert timestamp back to Date object
//         }));
//         resolve(bookmarks);
//       };
//       request.onerror = () => reject(request.error);
//     });
//   }

//   async exportBookmarks() {
//     const bookmarks = await this.getBookmarks();
//     const blob = new Blob([JSON.stringify(bookmarks)], { type: 'application/json' });
//     return URL.createObjectURL(blob);
//   }

//   async importBookmarks(jsonData) {
//     const bookmarks = JSON.parse(jsonData);

//     for (const bookmark of bookmarks) {
//       try {
//         await this.addBookmark(bookmark);
//       } catch (e) {
//         console.error('Failed to import bookmark:', bookmark, e);
//       }
//     }
//   }

//   async deleteBookmark(id) {
//     return new Promise((resolve, reject) => {
//       const tx = this.db.transaction('bookmarks', 'readwrite');
//       const store = tx.objectStore('bookmarks');
//       const request = store.delete(id);

//       request.onsuccess = () => resolve();
//       request.onerror = () => reject(request.error);
//     });
//   }

//   async findBookmarkByUrl(url) {
//     return new Promise((resolve, reject) => {
//       const tx = this.db.transaction('bookmarks', 'readonly');
//       const store = tx.objectStore('bookmarks');
//       const index = store.index('url');
//       const request = index.get(url);

//       request.onsuccess = () => resolve(request.result);
//       request.onerror = () => reject(request.error);
//     });
//   }
// }


// const dbInstance = new BookmarkDB();

// export { dbInstance, BookmarkDB };



const DB_NAME = 'smart-bookmarks';
const DB_VERSION = 1;

class BookmarkDB {
  constructor() {
    this.db = null;
  }

  async init() {
    return new Promise((resolve, reject) => {
      const request = indexedDB.open(DB_NAME, DB_VERSION);

      request.onerror = () => reject(request.error);
      request.onsuccess = () => {
        this.db = request.result;
        resolve();
      };

      request.onupgradeneeded = (event) => {
        const db = event.target.result;
        if (!db.objectStoreNames.contains('bookmarks')) {
          const store = db.createObjectStore('bookmarks', { keyPath: 'id', autoIncrement: true });
          store.createIndex('url', 'url', { unique: true }); // Index for quick lookup by URL
          store.createIndex('timestamp', 'timestamp'); // Index for sorting by timestamp
        }
      };
    });
  }

  async addBookmark({ url, summary, title, faviconUrl }) {
    const timestamp = new Date().toISOString(); // Ensure consistent format for timestamps
    const favicon = await this.getFavicon(faviconUrl); // Fetch favicon from the URL
    const bookmark = { url, summary, title, timestamp, favicon };

    return new Promise((resolve, reject) => {
      const tx = this.db.transaction('bookmarks', 'readwrite');
      const store = tx.objectStore('bookmarks');
      const request = store.add(bookmark);

      request.onsuccess = () => resolve(request.result);
      request.onerror = () => reject(request.error);
    });
  }

  async getBookmarks() {
    return new Promise((resolve, reject) => {
      const tx = this.db.transaction('bookmarks', 'readonly');
      const store = tx.objectStore('bookmarks');
      const request = store.getAll();

      request.onsuccess = () => {
        const bookmarks = request.result.map((bookmark) => ({
          ...bookmark,
          timestamp: new Date(bookmark.timestamp), // Convert timestamp back to Date object
        }));
        resolve(bookmarks);
      };
      request.onerror = () => reject(request.error);
    });
  }

  async exportBookmarks() {
    const bookmarks = await this.getBookmarks();
    const blob = new Blob([JSON.stringify(bookmarks)], { type: 'application/json' });
    return URL.createObjectURL(blob);
  }

  async importBookmarks(jsonData) {
    const bookmarks = JSON.parse(jsonData);

    for (const bookmark of bookmarks) {
      try {
        await this.addBookmark(bookmark);
      } catch (e) {
        console.error('Failed to import bookmark:', bookmark, e);
      }
    }
  }

  async deleteBookmark(id) {
    return new Promise((resolve, reject) => {
      const tx = this.db.transaction('bookmarks', 'readwrite');
      const store = tx.objectStore('bookmarks');
      const request = store.delete(id);

      request.onsuccess = () => resolve();
      request.onerror = () => reject(request.error);
    });
  }

  async findBookmarkByUrl(url) {
    return new Promise((resolve, reject) => {
      const tx = this.db.transaction('bookmarks', 'readonly');
      const store = tx.objectStore('bookmarks');
      const index = store.index('url');
      const request = index.get(url);

      request.onsuccess = () => resolve(request.result);
      request.onerror = () => reject(request.error);
    });
  }

  // Helper function to fetch the favicon from the URL
  async getFavicon(faviconUrl) {
    // const faviconUrl = `${new URL(url).origin}/favicon.ico`;

    // Fetch the favicon and convert it to a base64 string
    try {
      const response = await fetch(faviconUrl);
      if (!response.ok) throw new Error('Favicon not found');

      const blob = await response.blob();
      return await this.blobToBase64(blob); // Convert to base64
    } catch (e) {
      console.error('Failed to retrieve favicon:', e);
      return faviconUrl; // If favicon fetching fails, return null
    }
  }


  Uncaught (in promise) ConstraintError: Unable to add key to index 'url': at least one key does not satisfy the uniqueness requirements.
Context
sidepanel/index.html
Stack Trace
sidepanel/index.js:4655 (anonymous function)
...
3738
3739
3740
3741
3742
3743
3744
3745
3746
3747
3748
3749
3750
3751
3752
3753
3754
3755
3756
3757
3758
3759
3760
3761
3762
3763
3764
3765
3766
3767
3768
3769
3770
3771
3772
3773
3774
3775
3776
3777
3778
3779
3780
3781
3782
3783
3784
3785
3786
3787
3788
3789
3790
3791
3792
3793
3794
3795
3796
3797
3798
3799
3800
3801
3802
3803
3804
3805
3806
3807
3808
3809
3810
3811
3812
3813
3814
3815
3816
3817
3818
3819
3820
3821
3822
3823
3824
3825
3826
3827
3828
3829
3830
3831
3832
3833
3834
3835
3836
3837
3838
3839
3840
3841
3842
3843
3844
3845
3846
3847
3848
3849
3850
3851
3852
3853
3854
3855
3856
3857
3858
3859
3860
3861
3862
3863
3864
3865
3866
3867
3868
3869
3870
3871
3872
3873
3874
3875
3876
3877
3878
3879
3880
3881
3882
3883
3884
3885
3886
3887
3888
3889
3890
3891
3892
3893
3894
3895
3896
3897
3898
3899
3900
3901
3902
3903
3904
3905
3906
3907
3908
3909
3910
3911
3912
3913
3914
3915
3916
3917
3918
3919
3920
3921
3922
3923
3924
3925
3926
3927
3928
3929
3930
3931
3932
3933
3934
3935
3936
3937
3938
3939
3940
3941
3942
3943
3944
3945
3946
3947
3948
3949
3950
3951
3952
3953
3954
3955
3956
3957
3958
3959
3960
3961
3962
3963
3964
3965
3966
3967
3968
3969
3970
3971
3972
3973
3974
3975
3976
3977
3978
3979
3980
3981
3982
3983
3984
3985
3986
3987
3988
3989
3990
3991
3992
3993
3994
3995
3996
3997
3998
3999
4000
4001
4002
4003
4004
4005
4006
4007
4008
4009
4010
4011
4012
4013
4014
4015
4016
4017
4018
4019
4020
4021
4022
4023
4024
4025
4026
4027
4028
4029
4030
4031
4032
4033
4034
4035
4036
4037
4038
4039
4040
4041
4042
4043
4044
4045
4046
4047
4048
4049
4050
4051
4052
4053
4054
4055
4056
4057
4058
4059
4060
4061
4062
4063
4064
4065
4066
4067
4068
4069
4070
4071
4072
4073
4074
4075
4076
4077
4078
4079
4080
4081
4082
4083
4084
4085
4086
4087
4088
4089
4090
4091
4092
4093
4094
4095
4096
4097
4098
4099
4100
4101
4102
4103
4104
4105
4106
4107
4108
4109
4110
4111
4112
4113
4114
4115
4116
4117
4118
4119
4120
4121
4122
4123
4124
4125
4126
4127
4128
4129
4130
4131
4132
4133
4134
4135
4136
4137
4138
4139
4140
4141
4142
4143
4144
4145
4146
4147
4148
4149
4150
4151
4152
4153
4154
4155
4156
4157
4158
4159
4160
4161
4162
4163
4164
4165
4166
4167
4168
4169
4170
4171
4172
4173
4174
4175
4176
4177
4178
4179
4180
4181
4182
4183
4184
4185
4186
4187
4188
4189
4190
4191
4192
4193
4194
4195
4196
4197
4198
4199
4200
4201
4202
4203
4204
4205
4206
4207
4208
4209
4210
4211
4212
4213
4214
4215
4216
4217
4218
4219
4220
4221
4222
4223
4224
4225
4226
4227
4228
4229
4230
4231
4232
4233
4234
4235
4236
4237
4238
4239
4240
4241
4242
4243
4244
4245
4246
4247
4248
4249
4250
4251
4252
4253
4254
4255
4256
4257
4258
4259
4260
4261
4262
4263
4264
4265
4266
4267
4268
4269
4270
4271
4272
4273
4274
4275
4276
4277
4278
4279
4280
4281
4282
4283
4284
4285
4286
4287
4288
4289
4290
4291
4292
4293
4294
4295
4296
4297
4298
4299
4300
4301
4302
4303
4304
4305
4306
4307
4308
4309
4310
4311
4312
4313
4314
4315
4316
4317
4318
4319
4320
4321
4322
4323
4324
4325
4326
4327
4328
4329
4330
4331
4332
4333
4334
4335
4336
4337
4338
4339
4340
4341
4342
4343
4344
4345
4346
4347
4348
4349
4350
4351
4352
4353
4354
4355
4356
4357
4358
4359
4360
4361
4362
4363
4364
4365
4366
4367
4368
4369
4370
4371
4372
4373
4374
4375
4376
4377
4378
4379
4380
4381
4382
4383
4384
4385
4386
4387
4388
4389
4390
4391
4392
4393
4394
4395
4396
4397
4398
4399
4400
4401
4402
4403
4404
4405
4406
4407
4408
4409
4410
4411
4412
4413
4414
4415
4416
4417
4418
4419
4420
4421
4422
4423
4424
4425
4426
4427
4428
4429
4430
4431
4432
4433
4434
4435
4436
4437
4438
4439
4440
4441
4442
4443
4444
4445
4446
4447
4448
4449
4450
4451
4452
4453
4454
4455
4456
4457
4458
4459
4460
4461
4462
4463
4464
4465
4466
4467
4468
4469
4470
4471
4472
4473
4474
4475
4476
4477
4478
4479
4480
4481
4482
4483
4484
4485
4486
4487
4488
4489
4490
4491
4492
4493
4494
4495
4496
4497
4498
4499
4500
4501
4502
4503
4504
4505
4506
4507
4508
4509
4510
4511
4512
4513
4514
4515
4516
4517
4518
4519
4520
4521
4522
4523
4524
4525
4526
4527
4528
4529
4530
4531
4532
4533
4534
4535
4536
4537
4538
4539
4540
4541
4542
4543
4544
4545
4546
4547
4548
4549
4550
4551
4552
4553
4554
4555
4556
4557
4558
4559
4560
4561
4562
4563
4564
4565
4566
4567
4568
4569
4570
4571
4572
4573
4574
4575
4576
4577
4578
4579
4580
4581
4582
4583
4584
4585
4586
4587
4588
4589
4590
4591
4592
4593
4594
4595
4596
4597
4598
4599
4600
4601
4602
4603
4604
4605
4606
4607
4608
4609
4610
4611
4612
4613
4614
4615
4616
4617
4618
4619
4620
4621
4622
4623
4624
4625
4626
4627
4628
4629
4630
4631
4632
4633
4634
4635
4636
4637
4638
4639
4640
4641
4642
4643
4644
4645
4646
4647
4648
4649
4650
4651
4652
4653
4654
4655
4656
4657
4658
4659
4660
4661
4662
4663
4664
4665
4666
4667
4668
4669
4670
4671
4672
4673
4674
4675
4676
4677
4678
4679
4680
4681
4682
4683
4684
4685
4686
4687
4688
4689
4690
4691
4692
4693
4694
4695
4696
4697
4698
4699
4700
4701
4702
4703
4704
4705
4706
4707
4708
4709
4710
4711
4712
4713
4714
4715
4716
4717
4718
4719
4720
4721
4722
4723
4724
4725
4726
4727
4728
4729
4730
4731
4732
4733
4734
4735
4736
<3737 lines not shown>
            opts.async = this.defaults.async || opts.async || false;
            // ==-- Parse "addon" extensions --== //
            if (pack.extensions) {
                pack.extensions.forEach((ext) => {
                    if (!ext.name) {
                        throw new Error('extension name required');
                    }
                    if ('renderer' in ext) { // Renderer extensions
                        const prevRenderer = extensions.renderers[ext.name];
                        if (prevRenderer) {
                            // Replace extension with func to run new extension but fall back if false
                            extensions.renderers[ext.name] = function (...args) {
                                let ret = ext.renderer.apply(this, args);
                                if (ret === false) {
                                    ret = prevRenderer.apply(this, args);
                                }
                                return ret;
                            };
                        }
                        else {
                            extensions.renderers[ext.name] = ext.renderer;
                        }
                    }
                    if ('tokenizer' in ext) { // Tokenizer Extensions
                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {
                            throw new Error("extension level must be 'block' or 'inline'");
                        }
                        const extLevel = extensions[ext.level];
                        if (extLevel) {
                            extLevel.unshift(ext.tokenizer);
                        }
                        else {
                            extensions[ext.level] = [ext.tokenizer];
                        }
                        if (ext.start) { // Function to check for start of token
                            if (ext.level === 'block') {
                                if (extensions.startBlock) {
                                    extensions.startBlock.push(ext.start);
                                }
                                else {
                                    extensions.startBlock = [ext.start];
                                }
                            }
                            else if (ext.level === 'inline') {
                                if (extensions.startInline) {
                                    extensions.startInline.push(ext.start);
                                }
                                else {
                                    extensions.startInline = [ext.start];
                                }
                            }
                        }
                    }
                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens
                        extensions.childTokens[ext.name] = ext.childTokens;
                    }
                });
                opts.extensions = extensions;
            }
            // ==-- Parse "overwrite" extensions --== //
            if (pack.renderer) {
                const renderer = this.defaults.renderer || new _Renderer(this.defaults);
                for (const prop in pack.renderer) {
                    if (!(prop in renderer)) {
                        throw new Error(`renderer '${prop}' does not exist`);
                    }
                    if (['options', 'parser'].includes(prop)) {
                        // ignore options property
                        continue;
                    }
                    const rendererProp = prop;
                    const rendererFunc = pack.renderer[rendererProp];
                    const prevRenderer = renderer[rendererProp];
                    // Replace renderer with func to run extension, but fall back if false
                    renderer[rendererProp] = (...args) => {
                        let ret = rendererFunc.apply(renderer, args);
                        if (ret === false) {
                            ret = prevRenderer.apply(renderer, args);
                        }
                        return ret || '';
                    };
                }
                opts.renderer = renderer;
            }
            if (pack.tokenizer) {
                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);
                for (const prop in pack.tokenizer) {
                    if (!(prop in tokenizer)) {
                        throw new Error(`tokenizer '${prop}' does not exist`);
                    }
                    if (['options', 'rules', 'lexer'].includes(prop)) {
                        // ignore options, rules, and lexer properties
                        continue;
                    }
                    const tokenizerProp = prop;
                    const tokenizerFunc = pack.tokenizer[tokenizerProp];
                    const prevTokenizer = tokenizer[tokenizerProp];
                    // Replace tokenizer with func to run extension, but fall back if false
                    // @ts-expect-error cannot type tokenizer function dynamically
                    tokenizer[tokenizerProp] = (...args) => {
                        let ret = tokenizerFunc.apply(tokenizer, args);
                        if (ret === false) {
                            ret = prevTokenizer.apply(tokenizer, args);
                        }
                        return ret;
                    };
                }
                opts.tokenizer = tokenizer;
            }
            // ==-- Parse Hooks extensions --== //
            if (pack.hooks) {
                const hooks = this.defaults.hooks || new _Hooks();
                for (const prop in pack.hooks) {
                    if (!(prop in hooks)) {
                        throw new Error(`hook '${prop}' does not exist`);
                    }
                    if (['options', 'block'].includes(prop)) {
                        // ignore options and block properties
                        continue;
                    }
                    const hooksProp = prop;
                    const hooksFunc = pack.hooks[hooksProp];
                    const prevHook = hooks[hooksProp];
                    if (_Hooks.passThroughHooks.has(prop)) {
                        // @ts-expect-error cannot type hook function dynamically
                        hooks[hooksProp] = (arg) => {
                            if (this.defaults.async) {
                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {
                                    return prevHook.call(hooks, ret);
                                });
                            }
                            const ret = hooksFunc.call(hooks, arg);
                            return prevHook.call(hooks, ret);
                        };
                    }
                    else {
                        // @ts-expect-error cannot type hook function dynamically
                        hooks[hooksProp] = (...args) => {
                            let ret = hooksFunc.apply(hooks, args);
                            if (ret === false) {
                                ret = prevHook.apply(hooks, args);
                            }
                            return ret;
                        };
                    }
                }
                opts.hooks = hooks;
            }
            // ==-- Parse WalkTokens extensions --== //
            if (pack.walkTokens) {
                const walkTokens = this.defaults.walkTokens;
                const packWalktokens = pack.walkTokens;
                opts.walkTokens = function (token) {
                    let values = [];
                    values.push(packWalktokens.call(this, token));
                    if (walkTokens) {
                        values = values.concat(walkTokens.call(this, token));
                    }
                    return values;
                };
            }
            this.defaults = { ...this.defaults, ...opts };
        });
        return this;
    }
    setOptions(opt) {
        this.defaults = { ...this.defaults, ...opt };
        return this;
    }
    lexer(src, options) {
        return _Lexer.lex(src, options ?? this.defaults);
    }
    parser(tokens, options) {
        return _Parser.parse(tokens, options ?? this.defaults);
    }
    parseMarkdown(blockType) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const parse = (src, options) => {
            const origOpt = { ...options };
            const opt = { ...this.defaults, ...origOpt };
            const throwError = this.onError(!!opt.silent, !!opt.async);
            // throw error if an extension set async to true but parse was called with async: false
            if (this.defaults.async === true && origOpt.async === false) {
                return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));
            }
            // throw error in case of non string input
            if (typeof src === 'undefined' || src === null) {
                return throwError(new Error('marked(): input parameter is undefined or null'));
            }
            if (typeof src !== 'string') {
                return throwError(new Error('marked(): input parameter is of type '
                    + Object.prototype.toString.call(src) + ', string expected'));
            }
            if (opt.hooks) {
                opt.hooks.options = opt;
                opt.hooks.block = blockType;
            }
            const lexer = opt.hooks ? opt.hooks.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);
            const parser = opt.hooks ? opt.hooks.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);
            if (opt.async) {
                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)
                    .then(src => lexer(src, opt))
                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)
                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)
                    .then(tokens => parser(tokens, opt))
                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)
                    .catch(throwError);
            }
            try {
                if (opt.hooks) {
                    src = opt.hooks.preprocess(src);
                }
                let tokens = lexer(src, opt);
                if (opt.hooks) {
                    tokens = opt.hooks.processAllTokens(tokens);
                }
                if (opt.walkTokens) {
                    this.walkTokens(tokens, opt.walkTokens);
                }
                let html = parser(tokens, opt);
                if (opt.hooks) {
                    html = opt.hooks.postprocess(html);
                }
                return html;
            }
            catch (e) {
                return throwError(e);
            }
        };
        return parse;
    }
    onError(silent, async) {
        return (e) => {
            e.message += '\nPlease report this to https://github.com/markedjs/marked.';
            if (silent) {
                const msg = '<p>An error occurred:</p><pre>'
                    + escape$1(e.message + '', true)
                    + '</pre>';
                if (async) {
                    return Promise.resolve(msg);
                }
                return msg;
            }
            if (async) {
                return Promise.reject(e);
            }
            throw e;
        };
    }
}

const markedInstance = new Marked();
function marked(src, opt) {
    return markedInstance.parse(src, opt);
}
/**
 * Sets the default options.
 *
 * @param options Hash of options
 */
marked.options =
    marked.setOptions = function (options) {
        markedInstance.setOptions(options);
        marked.defaults = markedInstance.defaults;
        changeDefaults(marked.defaults);
        return marked;
    };
/**
 * Gets the original marked default options.
 */
marked.getDefaults = _getDefaults;
marked.defaults = _defaults;
/**
 * Use Extension
 */
marked.use = function (...args) {
    markedInstance.use(...args);
    marked.defaults = markedInstance.defaults;
    changeDefaults(marked.defaults);
    return marked;
};
/**
 * Run callback for every token
 */
marked.walkTokens = function (tokens, callback) {
    return markedInstance.walkTokens(tokens, callback);
};
/**
 * Compiles markdown to HTML without enclosing `p` tag.
 *
 * @param src String of markdown source to be compiled
 * @param options Hash of options
 * @return String of compiled HTML
 */
marked.parseInline = markedInstance.parseInline;
/**
 * Expose
 */
marked.Parser = _Parser;
marked.parser = _Parser.parse;
marked.Renderer = _Renderer;
marked.TextRenderer = _TextRenderer;
marked.Lexer = _Lexer;
marked.lexer = _Lexer.lex;
marked.Tokenizer = _Tokenizer;
marked.Hooks = _Hooks;
marked.parse = marked;
marked.options;
marked.setOptions;
marked.use;
marked.walkTokens;
marked.parseInline;
_Parser.parse;
_Lexer.lex;

// const DB_NAME = 'smart-bookmarks';
// const DB_VERSION = 1;

// class BookmarkDB {
//   constructor() {
//     this.db = null;
//   }

//   async init() {
//     return new Promise((resolve, reject) => {
//       const request = indexedDB.open(DB_NAME, DB_VERSION);

//       request.onerror = () => reject(request.error);
//       request.onsuccess = () => {
//         this.db = request.result;
//         resolve();
//       };

//       request.onupgradeneeded = (event) => {
//         const db = event.target.result;
//         if (!db.objectStoreNames.contains('bookmarks')) {
//           const store = db.createObjectStore('bookmarks', { keyPath: 'id', autoIncrement: true });
//           store.createIndex('url', 'url', { unique: true }); // Index for quick lookup by URL
//           store.createIndex('timestamp', 'timestamp'); // Index for sorting by timestamp
//         }
//       };
//     });
//   }

//   async addBookmark({ url, summary, title }) {
//     const timestamp = new Date().toISOString(); // Ensure consistent format for timestamps
//     const bookmark = { url, summary, title, timestamp };

//     return new Promise((resolve, reject) => {
//       const tx = this.db.transaction('bookmarks', 'readwrite');
//       const store = tx.objectStore('bookmarks');
//       const request = store.add(bookmark);

//       request.onsuccess = () => resolve(request.result);
//       request.onerror = () => reject(request.error);
//     });
//   }

//   async getBookmarks() {
//     return new Promise((resolve, reject) => {
//       const tx = this.db.transaction('bookmarks', 'readonly');
//       const store = tx.objectStore('bookmarks');
//       const request = store.getAll();

//       request.onsuccess = () => {
//         const bookmarks = request.result.map((bookmark) => ({
//           ...bookmark,
//           timestamp: new Date(bookmark.timestamp), // Convert timestamp back to Date object
//         }));
//         resolve(bookmarks);
//       };
//       request.onerror = () => reject(request.error);
//     });
//   }

//   async exportBookmarks() {
//     const bookmarks = await this.getBookmarks();
//     const blob = new Blob([JSON.stringify(bookmarks)], { type: 'application/json' });
//     return URL.createObjectURL(blob);
//   }

//   async importBookmarks(jsonData) {
//     const bookmarks = JSON.parse(jsonData);

//     for (const bookmark of bookmarks) {
//       try {
//         await this.addBookmark(bookmark);
//       } catch (e) {
//         console.error('Failed to import bookmark:', bookmark, e);
//       }
//     }
//   }

//   async deleteBookmark(id) {
//     return new Promise((resolve, reject) => {
//       const tx = this.db.transaction('bookmarks', 'readwrite');
//       const store = tx.objectStore('bookmarks');
//       const request = store.delete(id);

//       request.onsuccess = () => resolve();
//       request.onerror = () => reject(request.error);
//     });
//   }

//   async findBookmarkByUrl(url) {
//     return new Promise((resolve, reject) => {
//       const tx = this.db.transaction('bookmarks', 'readonly');
//       const store = tx.objectStore('bookmarks');
//       const index = store.index('url');
//       const request = index.get(url);

//       request.onsuccess = () => resolve(request.result);
//       request.onerror = () => reject(request.error);
//     });
//   }
// }


// const dbInstance = new BookmarkDB();

// export { dbInstance, BookmarkDB };



const DB_NAME = 'smart-bookmarks';
const DB_VERSION = 1;

class BookmarkDB {
  constructor() {
    this.db = null;
  }

  async init() {
    return new Promise((resolve, reject) => {
      const request = indexedDB.open(DB_NAME, DB_VERSION);

      request.onerror = () => reject(request.error);
      request.onsuccess = () => {
        this.db = request.result;
        resolve();
      };

      request.onupgradeneeded = (event) => {
        const db = event.target.result;
        if (!db.objectStoreNames.contains('bookmarks')) {
          const store = db.createObjectStore('bookmarks', { keyPath: 'id', autoIncrement: true });
          store.createIndex('url', 'url', { unique: true }); // Index for quick lookup by URL
          store.createIndex('timestamp', 'timestamp'); // Index for sorting by timestamp
        }
      };
    });
  }

  async addBookmark({ url, summary, title, faviconUrl }) {
    const timestamp = new Date().toISOString(); // Ensure consistent format for timestamps
    const favicon = await this.getFavicon(faviconUrl); // Fetch favicon from the URL
    const bookmark = { url, summary, title, timestamp, favicon };

    return new Promise((resolve, reject) => {
      const tx = this.db.transaction('bookmarks', 'readwrite');
      const store = tx.objectStore('bookmarks');
      const request = store.add(bookmark);

      request.onsuccess = () => resolve(request.result);
      request.onerror = () => reject(request.error);
    });
  }

  async getBookmarks() {
    return new Promise((resolve, reject) => {
      const tx = this.db.transaction('bookmarks', 'readonly');
      const store = tx.objectStore('bookmarks');
      const request = store.getAll();

      request.onsuccess = () => {
        const bookmarks = request.result.map((bookmark) => ({
          ...bookmark,
          timestamp: new Date(bookmark.timestamp), // Convert timestamp back to Date object
        }));
        resolve(bookmarks);
      };
      request.onerror = () => reject(request.error);
    });
  }

  async exportBookmarks() {
    const bookmarks = await this.getBookmarks();
    const blob = new Blob([JSON.stringify(bookmarks)], { type: 'application/json' });
    return URL.createObjectURL(blob);
  }

  async importBookmarks(jsonData) {
    const bookmarks = JSON.parse(jsonData);

    for (const bookmark of bookmarks) {
      try {
        await this.addBookmark(bookmark);
      } catch (e) {
        console.error('Failed to import bookmark:', bookmark, e);
      }
    }
  }

  async deleteBookmark(id) {
    return new Promise((resolve, reject) => {
      const tx = this.db.transaction('bookmarks', 'readwrite');
      const store = tx.objectStore('bookmarks');
      const request = store.delete(id);

      request.onsuccess = () => resolve();
      request.onerror = () => reject(request.error);
    });
  }

  async findBookmarkByUrl(url) {
    return new Promise((resolve, reject) => {
      const tx = this.db.transaction('bookmarks', 'readonly');
      const store = tx.objectStore('bookmarks');
      const index = store.index('url');
      const request = index.get(url);

      request.onsuccess = () => resolve(request.result);
      request.onerror = () => reject(request.error);
    });
  }

  // Helper function to fetch the favicon from the URL
  async getFavicon(faviconUrl) {
    // const faviconUrl = `${new URL(url).origin}/favicon.ico`;

    // Fetch the favicon and convert it to a base64 string
    try {
      const response = await fetch(faviconUrl);
      if (!response.ok) throw new Error('Favicon not found');

      const blob = await response.blob();
      return await this.blobToBase64(blob); // Convert to base64
    } catch (e) {
      console.error('Failed to retrieve favicon:', e);
      return faviconUrl; // If favicon fetching fails, return null
    }
  }

  // Helper function to convert a Blob to a Base64 string
  async blobToBase64(blob) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onloadend = () => resolve(reader.result.split(',')[1]); // Remove the 'data:image/x' part of the URL
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  }
}

const dbInstance = new BookmarkDB();

// let summarizerPool = null;
// let rewriterPool = null;

// async function getSummarizer(options, moreContext) {
//   if (!summarizerPool) {
//     summarizerPool = await ai.summarizer.create({
//       sharedContext: moreContext,
//       ...options,
//     });
//   }
//   return summarizerPool;
// }

// async function getRewriter(options) {
//   if (!rewriterPool) {
//     rewriterPool = await ai.rewriter.create({
//       sharedContext: "Combine summaries into a cohesive output with a crisp title.",
//       ...options,
//     });
//   }
//   return rewriterPool;
// }

// async function summarizeAndRewrite(
//   text,
//   summarizerOptions,
//   rewriterOptions,
//   maxCharLimit,
//   role,
//   moreContext
// ) {
//   console.log("Summarizing and rewriting text...");
//   function splitTextIntoChunks(text, limit) {
//     let chunks = [];
//     for (let i = 0; i < text.length; i += limit) {
//       chunks.push(text.slice(i, i + limit));
//     }
//     return chunks;
//   }

//   let summaries = [];

//   if (text.length > maxCharLimit) {
//     console.log("Text is too long. Splitting into chunks...");
//     const chunks = splitTextIntoChunks(text, maxCharLimit);
//     const summarizer = await getSummarizer(summarizerOptions, moreContext);

//     for (let i = 0; i < chunks.length; i++) {
//       const context =
//         i === 0
//           ? "This text is the first part of the large. Summarize it for combination."
//           : i === chunks.length - 1
//             ? "This text is the last part of a large. Summarize it for combination."
//             : "This text is a middle part of the large. Summarize it for combination.";

//       const summary = await summarizer.summarize(chunks[i], { context: context });
//       summaries.push(summary);
//     }
//   } else {
//     console.log("Text is short enough to summarize in one go.");
//     const summarizer = await getSummarizer(summarizerOptions, moreContext);
//     const summary = await summarizer.summarize(text);
//     summaries.push(summary);
//   }

//   console.log("Summaries:", summaries);
//   console.log("Combining summaries...");

//   const combinedText = summaries.join("\n\n");
//   console.log("Combined text:", combinedText);

//   console.log("Rewriting combined text...");
//   const rewriter = await getRewriter(rewriterOptions);

//   const finalResult = await rewriter.rewrite(combinedText, {
//     context: `Rewrite into a cohesive summary from a ${role}'s perspective.`,
//   });

//   return finalResult;
// }

// // Auto-destruction for idle objects
// // function releaseResources(timeout = 60000) {
// //   setTimeout(() => {
// //     summarizerPool = null;
// //     rewriterPool = null;
// //   }, timeout);
// // }

// // Usage
// // (async () => {
// //   const text = `Your long text here...`;
// //   const result = await summarizeAndRewrite(text);
// //   console.log(result);
// // })();


// export { summarizeAndRewrite };



let summarizerPool = null;
let rewriterPool = null;

async function createSummarizer(options, moreContext) {
  try {
    const summarizerOptions = {
      ...options,
      ...(moreContext && { sharedContext: moreContext }), // Include sharedContext only if moreContext is truthy
    };
    // {
    //   sharedContext: moreContext,
    //   ...options,
    // }
    return await ai.summarizer.create(summarizerOptions);
  } catch (error) {
    console.error("Error creating summarizer:", error);
    throw error;
  }
}

async function createRewriter(options) {
  try {
    const summarizerOptions = {
      sharedContext: "Combine summaries into a cohesive output with a crisp title.",
      ...options
    };
    return await ai.rewriter.create(summarizerOptions);
  } catch (error) {
    console.error("Error creating rewriter:", error);
    throw error;
  }
}

async function getSummarizer(options, moreContext) {
  if (!summarizerPool) {
    summarizerPool = await createSummarizer(options, moreContext);
  }
  return summarizerPool;
}

async function getRewriter(options) {
  if (!rewriterPool) {
    rewriterPool = await createRewriter(options);
  }
  return rewriterPool;
}

async function summarizeAndRewrite(
  text,
  summarizerOptions,
  rewriterOptions,
  maxCharLimit,
  role,
  moreContext
) {
  console.log("Summarizing and rewriting text...");

  function splitTextIntoChunks(text, limit) {
    let chunks = [];
    for (let i = 0; i < text.length; i += limit) {
      chunks.push(text.slice(i, i + limit));
    }
    return chunks;
  }

  let summaries = [];

  try {
    if (text.length > maxCharLimit) {
      console.log("Text is too long. Splitting into chunks...");
      const chunks = splitTextIntoChunks(text, maxCharLimit);
      const summarizer = await getSummarizer(summarizerOptions, moreContext);

      for (let i = 0; i < chunks.length; i++) {
        const context =
          i === 0
            ? "This text is the first part of the large. Summarize it for combination."
            : i === chunks.length - 1
              ? "This text is the last part of a large. Summarize it for combination."
              : "This text is a middle part of the large. Summarize it for combination.";

        try {
          const summary = await summarizer.summarize(chunks[i], { context: context });
          console.log("Summary:", summary);
          summaries.push(summary);
        } catch (error) {
          console.error(`Error summarizing chunk ${i}:`, error);
          throw error;
        }
      }
    } else {
      console.log("Text is short enough to summarize in one go.");
      const summarizer = await getSummarizer(summarizerOptions, moreContext);

      try {
        const summary = await summarizer.summarize(text);
        console.log("Summary:", summary);
        summaries.push(summary);
      } catch (error) {
        console.error("Error summarizing text:", error);
        throw error;
      }
    }

    console.log("Summaries:", summaries);
    console.log("Combining summaries...");

    const combinedText = summaries.join("\n\n");
    console.log("Combined text:", combinedText);

    console.log("Rewriting combined text...");
    const rewriter = await getRewriter(rewriterOptions);

    try {
      const finalResult = await rewriter.rewrite(combinedText, {
        context: `Rewrite into a cohesive summary from a ${role}'s perspective.`,
      });
      console.log("Final result:", finalResult);
      return finalResult;
    } catch (error) {
      console.error("Error rewriting text:", error);
      throw error;
    }
  } catch (error) {
    console.error("Error in summarizeAndRewrite:", error);
    throw error;
  }
}

// Extract Page Content
async function extractPageContent() {
  const tabs = await chrome.tabs.query({ active: true, currentWindow: true });
  const tab = tabs[0];
  if (!tab.url.startsWith('http')) {
    throw new Error("Cannot summarize non-HTTP/HTTPS pages.");
  }

  const injection = await chrome.scripting.executeScript({
    target: { tabId: tab.id },
    // func: () => document.body.innerText, // Extract visible text from the page
    files: ['scripts/extract-content.js']
  });

  if (!injection || !injection[0]?.result) {
    throw new Error("Failed to extract page content.");
  }

  let cleanedText = injection[0].result.replace(/\[.*?\]/g, "");

  cleanedText = cleanedText.replace(/\[edit\]/gi, "");

  cleanedText = cleanedText
    .replace(/\s{2,}/g, " ")
    .replace(/\n+/g, "\n")
    .replace(/\n\s*\n/g, '\n')
    .replace(/chrome:\/\/[^\s]+/g, '') // Remove any URL of the type chrome://
    .replace(/http?:\/\/[^\s]+/g, '') // Remove any URL of the type http:// or https://
    .replace(/https?:\/\/[^\s]+/g, '') // Remove any URL of the type http:// or https://
    .replace(/:\/\/[^\s]+/g, '') // Remove any URL of the type http:// or https://
    .trim();

  return { content: cleanedText, url: tab.url, title: tab.title, favIconUrl: tab.favIconUrl };
}

async function getPageSelection() {
  const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });

  if (!tab) {
    throw new Error('No active tab found');
  }

  const [result] = await chrome.scripting.executeScript({
    target: { tabId: tab.id },
    func: () => {
      return {
        content: window.getSelection().toString(),
      };
    },
  });

  const selectedContent = result?.result?.content || '';

  return {
    content: selectedContent,
    url: tab.url,
    title: tab.title,
    favIconUrl: tab.favIconUrl
  };
}

// bookmarks IndexDB instance
const db = dbInstance;
await db.init();

// Navigation
document.querySelectorAll('.nav-btn').forEach(btn => {
  btn.addEventListener('click', () => {
    document.querySelectorAll('.nav-btn').forEach(b => b.classList.remove('active'));
    document.querySelectorAll('.page').forEach(p => p.classList.remove('active'));

    btn.classList.add('active');
    document.getElementById(`${btn.dataset.page}-page`).classList.add('active');
  });
});

// Generate Summary
document.getElementById('generate-summary').addEventListener('click', async () => {
  const type = document.getElementById('summary-type').value;
  const length = document.getElementById('summary-length').value;
  const role = document.getElementById('summary-role').value;
  const context = document.getElementById('summary-context').value;
  const contenttype = document.getElementById('summary-content').value;
  const tone = document.getElementById('summary-tone').value;

  try {
    let { content, url, title, favIcon } = contenttype === 'selected-text' ? await getPageSelection() : await extractPageContent();
    console.log("Extracted content:", content);
    // console.log("Options:", options);
    console.log("URL:", url);
    console.log("Title:", title);
    if (content === '') {
      alert("No text selected. Please select some text to summarize.");
      return;
    }
    // text,
    //   summarizerOptions = { type: "key-points", length: "long" },
    // const  rewriterOptions = { tone: "developer", format: "plain", length: "concise" },
    // enum AISummarizerType { "tl;dr", "key-points", "teaser", "headline" };
    // enum AISummarizerFormat { "plain-text", "markdown" };
    // enum AISummarizerLength { "short", "medium", "long" };
    // enum AIRewriterTone { "as-is", "more-formal", "more-casual" };
    // enum AIRewriterFormat { "as-is", "plain-text", "markdown" };
    // enum AIRewriterLength { "as-is", "shorter", "longer" };
    const summarizerOptions = { type: type, format: "plain-text", length: length };
    const rewriterOptions = { tone: tone, format: "plain-text", length: "as-is" };
    const maxCharLimit = 4000;

    const summary = await summarizeAndRewrite(content, summarizerOptions, rewriterOptions, maxCharLimit, role, context);
    // console.log("Content after prompt:", summary);


    const sanitizedSummary = purify.sanitize(summary);
    console.log("Sanitized summary:", sanitizedSummary);

    const summaryContainer = document.getElementById('summary-res');
    summaryContainer.value = sanitizedSummary; // Set the value of the textarea
    document.getElementById('summary-result').classList.remove('hidden');
    console.log("Summary displayed in HTML");

    // Attach bookmark functionality
    document.getElementById('add-bookmark').onclick = async () => {
      const editedSummary = summaryContainer.value;
      await db.addBookmark({
        url,
        title,
        summary: editedSummary,
        timestamp: new Date().toISOString(),
        faviconUrl: favIcon,
      });
      updateBookmarksList();
    };